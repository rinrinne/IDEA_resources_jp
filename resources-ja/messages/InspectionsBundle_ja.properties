inspection.diff.format.error=必須パラメータ \: <old_file> <new_file> [<delta_file_name>]
inspection.command.line.explanation=Expected parameters: <project_file_path> <inspection_profile> <output_path> \
  <inspections_profile> -- use here profile name configured in the project or locally or path to the inspection profile; can be stabbed when one of the -e|-profileName|-profilePath is used\n\
  [<options>]\n \
  Available options are:\n \
  -d <directory_path>  --  directory to be inspected. Optional. Whole project is inspected by default.\n \
  -e                   --  skip  \n\
  -v[0|1|2]            --  verbose level. 0 - silent, 1 - verbose, 2 - most verbose. \n\
  -profileName         --  name of a profile defined in project \n \
  -profilePath         --  absolute path to the profile file

inspection.action.title=検査
inspection.action.noun=検査
inspection.action.profile.label=検査プロファイル(&I)\:

inspection.disabled.title=Inspection disabled
inspection.disabled.wrong.id=Inspection ''{0}'' is disabled\: ID ''{1}'' not matches ''{2}'' pattern.
inspection.disabled.error=Inspection ''{0}'' is disabled\: {1}.

inspection.problem.synopsis=問題の概要

#export results view
inspection.export.results.description.tag=説明
inspection.export.results.problem.element.tag=問題のクラス(_C)
inspection.export.results.can.be.final.description=宣言は final 修飾子を持てます

inspection.export.results.package=パッケージ
inspection.export.results.default=<デフォルト>
inspection.export.results.class=クラス \:
inspection.export.results.constructor=コンストラクタ
inspection.export.results.method=メソッド
inspection.export.results.field=フィールド
inspection.export.results.file=ファイル
inspection.export.results.interface=インターフェイス

#can be final
inspection.can.be.final.display.name=宣言は final 修飾子を持てます
inspection.can.be.final.accept.quickfix=推奨する final 修飾子を適用する
inspection.can.be.final.option=クラスのレポート
inspection.can.be.final.option1=メソッドのレポート
inspection.can.be.final.option2=フィールドのレポート

#can be static
inspection.annotate.method.quickfix.name=Annotate method as ''@{0}''

#dataflow
inspection.data.flow.display.name=一定条件 \\& 例外
inspection.data.flow.nullable.quickfix.option=<html><body>null を返す可能性のあるメソッドに @Nullable 注釈を付けることを推奨します。<br> {0} ディストリビューションから JDK5.0 と annotations.jar が必要です。</body></html>
inspection.data.flow.true.asserts.option=<html><body>Don't report assertions with condition statically proven to be always <code>true</code></body></html>
inspection.data.flow.redundant.instanceof.quickfix=\!\= null で置換する
inspection.data.flow.simplify.boolean.expression.quickfix=Boolean 式を簡素化
inspection.data.flow.simplify.to.assignment.quickfix.name=Simplify to normal assignment
configure.annotations.option=Configure annotations
configure.checker.option.button=Configure Assert/Check Methods
configure.checker.option.main.dialog.title=Assert/Check Method Configuration
configure.checker.option.overlap.error.title=Overlapping Check
configure.checker.option.overlap.error.msg=Configuration conflicts with
configure.checker.option.isNull.add.method.checker.dialog.title=Add IsNull Check Method
configure.checker.option.isNotNull.add.method.checker.dialog.title=Add IsNotNull Check Method
configure.checker.option.assert.isNull.add.method.checker.dialog.title=Add Assert IsNull Method
configure.checker.option.assert.isNotNull.add.method.checker.dialog.title=Add Assert IsNotNull Method
configure.checker.option.assert.true.add.method.checker.dialog.title=Add Assert True Method
configure.checker.option.assert.false.add.method.checker.dialog.title=Add Assert False Method
configure.checker.option.assert.isNull.method.panel.title=Assert IsNull Methods
configure.checker.option.assert.isNotNull.method.panel.title=Assert IsNotNull Methods
configure.checker.option.isNull.method.panel.title=IsNull Check Methods
configure.checker.option.isNotNull.method.panel.title=IsNotNull Check Methods
configure.checker.option.assert.true.method.panel.title=Assert True Methods
configure.checker.option.assert.false.method.panel.title=Assert False Methods

#messages from dataflow inspection
dataflow.message.npe.method.invocation=Method invocation <code>\#ref</code> \#loc may produce <code>java.lang.NullPointerException</code>.
dataflow.message.npe.array.access=Array access <code>\#ref</code> \#loc may produce <code>java.lang.NullPointerException</code>.
dataflow.message.npe.field.access=Member variable access <code>\#ref</code> \#loc may produce <code>java.lang.NullPointerException</code>.
dataflow.message.cce=Casting <code>{0}</code> to <code>\#ref</code> \#loc may produce <code>java.lang.ClassCastException</code>.
dataflow.message.redundant.instanceof=Condition <code>\#ref</code> \#loc is redundant and can be replaced with <code>\!\= null</code>
dataflow.message.constant.condition=Condition <code>\#ref</code> \#loc is always <code>{0}</code>.
dataflow.message.constant.condition.when.reached=Condition <code>\#ref</code> \#loc is always <code>{0}</code> when reached
dataflow.message.unreachable.switch.label=Switch label<code>\#ref</code> \#loc is unreachable.
dataflow.message.pointless.assignment.expression=Condition <code>\#ref</code> \#loc at the left side of assignment expression is always <code>{0}</code>. Can be simplified to normal assignment.
dataflow.message.passing.null.argument=Passing <code>null</code> argument to parameter annotated as @NotNull
dataflow.message.initializing.field.with.null=Field annotated as @NotNull is implicitly initialized with <code>null</code>
dataflow.message.passing.nullable.argument=Argument <code>\#ref</code> \#loc might be null
dataflow.message.assigning.null=<code>null</code> is assigned to a variable that is annotated with @NotNull
dataflow.message.assigning.nullable=Expression <code>\#ref</code> might evaluate to null but is assigned to a variable that is annotated with @NotNull
dataflow.message.return.null.from.notnull=<code>null</code> is returned by the method declared as @NotNull
dataflow.message.return.nullable.from.notnull=Expression <code>\#ref</code> might evaluate to null but is returned by the method declared as @NotNull
dataflow.message.return.null.from.notnullable=<code>null</code> is returned by the method which isn't declared as @Nullable
dataflow.message.return.nullable.from.notnullable=Expression <code>\#ref</code> might evaluate to null but is returned by the method which isn't declared as @Nullable
dataflow.message.unboxing=Unboxing of <code>\#ref</code> \#loc may produce <code>java.lang.NullPointerException</code>
dataflow.too.complex=Method <code>\#ref</code> is too complex to analyze by data flow algorithm

#deprecated
inspection.deprecated.display.name=非推奨 API の使用方法
#empty method
inspection.empty.method.display.name=空のメソッド
inspection.empty.method.delete.quickfix=不要なメソッドを削除する
inspection.empty.method.problem.descriptor=メソッドは super のみを呼び出す。
inspection.empty.method.problem.descriptor1=空のメソッドが空のメソッドをオーバーライドする。
inspection.empty.method.problem.descriptor2=このメソッドは空です。
inspection.empty.method.problem.descriptor3=メソッドおよびすべての派生が空です。
inspection.empty.method.problem.descriptor4=このメソッドのすべての実装は空です。

#redundant cast
inspection.redundant.cast.display.name=冗長な型キャスト
inspection.redundant.cast.remove.quickfix=冗長なキャストの削除
inspection.redundant.cast.problem.descriptor={0} の {1} へのキャストは冗長です

#redundant throws
inspection.redundant.throws.display.name=冗長な throws 句
inspection.redundant.throws.remove.quickfix=不要な throws 宣言の削除
inspection.redundant.throws.problem.descriptor=宣言した例外 {0} は、メソッドの実装ではスローされません。
inspection.redundant.throws.problem.descriptor1=宣言した {0} は、このメソッドおよび派生ではスローされません。
inspection.redundant.throws.problem.descriptor2=宣言した {0} は、スローされません。

inspection.equals.hashcode.display.name=equals() と hashCode() が組になっていません
inspection.equals.hashcode.only.one.defined.problem.descriptor=クラスでは {0} が定義されていますが {1} が定義されていません

inspection.1.5.display.name={0} として文書化された API の使用方法
inspection.1.5.problem.descriptor={0} として文書化された API の使用方法

inspection.local.can.be.final.display.name=ローカル変数またはパラメータは final にできます。
inspection.local.can.be.final.option=ローカル変数のレポート
inspection.local.can.be.final.option1=メソッド パラメータのレポート
inspection.can.be.local.parameter.problem.descriptor=パラメータ <code>\#ref</code> は <code>final</code> 修飾子を持てます。
inspection.can.be.local.variable.problem.descriptor=変数 <code>\#ref</code> は <code>final</code> 修飾子を持てます。

inspection.nullable.problems.display.name=@Nullable 問題
#check box options
inspection.nullable.problems.method.overrides.notnull.option=@Nullable メソッドによる @NotNull のオーバーライドをレポート
inspection.nullable.problems.method.overrides.option=注釈なしのメソッドによる @NotNull のオーバーライドをレポート
inspection.nullable.problems.not.annotated.getters.for.annotated.fields=report non-annotated &setter parameter or getter of annotated fields
inspection.nullable.problems.annotation.not.propagated=report @NotNull not propagated to ove&rridden methods

#problem descriptor messages
inspection.nullable.problems.Nullable.NotNull.conflict=Cannot annotate with both @Nullable and @NotNull
inspection.nullable.problems.Nullable.method.overrides.NotNull=Method annotated with @Nullable must not override @NotNull method
inspection.nullable.problems.method.overrides.NotNull=Not annotated method overrides method annotated with @NotNull
inspection.nullable.problems.annotated.field.getter.not.annotated=Getter for @{0} field might be annotated @{0} itself
inspection.nullable.problems.annotated.field.getter.conflict=Getter for @{0} field is annotated @{1}
inspection.nullable.problems.annotated.field.setter.parameter.not.annotated=Setter parameter for @{0} field might be annotated @{0} itself
inspection.nullable.problems.annotated.field.setter.parameter.conflict=Setter parameter for @{0} field is annotated @{1}
inspection.nullable.problems.annotated.field.constructor.parameter.not.annotated=Constructor parameter for @{0} field might be annotated @{0} itself
inspection.nullable.problems.annotated.field.constructor.parameter.conflict=Constructor parameter for @{0} field is annotated @{1}
inspection.nullable.problems.NotNull.parameter.overrides.Nullable=Parameter annotated @NonNull must not override @Nullable parameter
inspection.nullable.problems.parameter.overrides.NotNull=Not annotated parameter overrides @NotNull parameter
inspection.nullable.problems.primitive.type.annotation=Primitive type members cannot be Nullable/NotNull annotated

inspection.test.only.problems.display.name=Test-only method call in production code
inspection.test.only.problems.test.only.method.call=Test-only method is called in production code

inspection.visibility.display.name=宣言アクセスの制限
inspection.visibility.option=クラス メンバのパッケージ ローカル可視レベルを示す
inspection.visibility.option1=トップレベル クラスのパッケージ ローカル可視レベルを示す
inspection.visibility.option2=外部クラスからのみ参照される内部クラス メンバをプライベートに示す

#can be private|package local|protected|public
inspection.visibility.compose.suggestion={0} 設定

inspection.visibility.accept.quickfix=推奨するアクセス レベルを適用する
inspection.field.can.be.local.display.name=フィールドはローカルにできます
inspection.field.can.be.local.problem.descriptor=フィールドは複数のローカル変数に変換できます。
inspection.parameter.can.be.local.display.name=Parameter can be local
inspection.parameter.can.be.local.problem.descriptor=Parameter can be converted to a local variable
inspection.convert.to.local.quickfix=Convert to local

inspection.unused.return.value.display.name=使用しないメソッドの戻り値
inspection.unused.return.value.problem.descriptor=メソッドの戻り値は使用されません。
inspection.unused.return.value.make.void.quickfix=メソッドを無効にする

inspection.same.return.value.display.name=メソッドは同じ値を返します
inspection.same.return.value.problem.descriptor=メソッドは常に {0} を返します
inspection.same.return.value.problem.descriptor1=メソッドとすべての派生は {0} を返します
inspection.same.return.value.problem.descriptor2=このメソッドのすべての実装は常に {0} を返します

inspection.dependency.violator.problem.descriptor=依存関係ルール ''{0}.'' に違反しています

inspection.same.parameter.display.name=実際のメソッド パラメータは同じ定数です
inspection.same.parameter.problem.descriptor=実際のパラメータ ''{0}'' の値は常に ''{1}'' です。

inspection.unused.assignment.display.name=使用しない代入
inspection.unused.assignment.option=(i + 1) で置換される ++i をレポート
inspection.unused.assignment.option1=変更後の値が使用されない i++ をレポート
inspection.unused.assignment.option2=冗長な初期化子をレポート
inspection.unused.assignment.remove.quickfix=冗長な初期化子を削除
inspection.unused.assignment.problem.descriptor1=変数 {0} は使用されません。
inspection.unused.assignment.problem.descriptor2=変数 {0} の初期化子 {1} は冗長です。
inspection.unused.assignment.problem.descriptor3={1} に代入する値 {0} は使用されません。
inspection.unused.assignment.problem.descriptor4={0} で変更した値は使用されません。
inspection.unused.assignment.problem.descriptor5=変数 {0} は使用されません。
inspection.unused.assignment.problem.descriptor6=変数は、{0} でそれ自身に代入しています。

inspection.unused.parameter.composer=次のパラメータは、どの実装でも使用されません。
inspection.unused.parameter.composer1=次のパラメータは、このメソッドや、その派生メソッドでも使用されません
inspection.unused.parameter.display.name=未使用のメソッド パラメータ
inspection.unused.parameter.delete.quickfix=未使用のパラメータを削除する
inspection.redundant.type.display.name=冗長なタイプ引数
inspection.redundant.type.remove.quickfix=明示的なタイプ引数を削除する
inspection.redundant.type.problem.descriptor=明示的なタイプ引数は推測されます

inspection.redundant.array.creation.display.name=冗長な配列作成
inspection.redundant.array.creation.quickfix=明示的な配列作成の削除
inspection.redundant.array.creation.for.varargs.call.descriptor=varargs メソッド呼び出しの冗長な配列作成

inspection.suspicious.collections.method.calls.display.name=疑わしいコレクション メソッド呼び出し
inspection.suspicious.collections.method.calls.problem.descriptor=''{0}'' は、タイプ ''{1}'' のオブジェクトを含んでいない可能性があります
inspection.suspicious.collections.method.calls.problem.descriptor1=疑わしい ''{0}'' への呼び出し

inspection.reference.invalid=不正
inspection.reference.default.package=デフォルト パッケージ
inspection.reference.implicit.constructor.name={0} の暗黙的なコンストラクタ
inspection.reference.noname=名前なし
inspection.reference.anonymous.name=匿名 ({0})
inspection.reference.jsp.holder.method.anonymous.name=<% ページ内容 %>
inspection.reference.anonymous=匿名
inspection.export.save.button=保存
inspection.export.dialog.title=HTML へのエクスポート
inspection.export.options.panel.title=オプション
inspection.export.open.option=ブラウザで生成された HTML を開く(&B)
inspection.export.title=コード検査結果
inspection.export.generating.html.for=HTML を生成しています \:{0}
inspection.export.error.writing.to={0} への書き込みエラー

inspection.export.results.error.title=検査結果のエクスポート
inspection.export.inspections.link.text=検査
inspection.export.open.source.link.text=ソースを開く
inspection.offline.view.empty.browser.text=<HTML><BODY>詳細はツリー ノードを選択してください</BODY></HTML>
inspection.offline.view.tool.display.name.title=名前
inspection.generating.html.progress.title=HTML を生成しています...
inspection.generating.xml.progress.title=Dumping XML...
inspection.action.export.html=HTML のエクスポート
inspection.action.export.popup.title=Export To
inspection.tool.description.under.construction.text=準備中
inspection.tool.in.browser.id.title=ID
inspection.tool.in.browser.description.title=説明
inspection.action.edit.settings=設定の編集
inspection.action.apply.quickfix=クイックフィックスの適用
inspection.action.apply.quickfix.description=検査クイックフィックスの適用
inspection.tree.popup.title=解決策の適用
inspection.action.rerun=検査の再実行
inspection.general.tools.group.name=一般
inspection.empty.root.node.text=表示する内容がありません
inspection.invalid.node.text=(不正)
inspection.problem.descriptor.count=({0, choice, 1\#1 item|2\#{0,number,integer} items})
inspection.action.go.next=次の問題へ
inspection.actiongo.prev=前の問題へ

inspection.javadoc.display.name=宣言には javadoc 問題があります
inspection.javadoc.ref.display.name=Declaration has problems in Javadoc references
inspection.javadoc.option.tab.title=クラス
inspection.javadoc.option.tab.title.method=Method
inspection.javadoc.option.tab.title.field=Field
inspection.javadoc.option.tab.title.inner.class=Inner class
inspection.javadoc.option.ignore.deprecated=@deprecated としてマークされた要素を無視する
inspection.javadoc.option.ignore.period=Ignore period problems

inspection.scope.for.title=スコープ

inspection.javadoc.required.tags.option.title=必要なタグ
inspection.javadoc.problem.descriptor=必要な javadoc がありません
inspection.javadoc.problem.descriptor1=ドキュメントにピリオドがありません。 ピリオドは javadoc tool により使用され、概要ページのコメントを生成します。
inspection.javadoc.problem.missing.tag=Required tag {0} is missing
inspection.javadoc.problem.missing.author.description=Author is missing after @author tag
inspection.javadoc.problem.missing.version.description=Version is missing after @version tag
inspection.javadoc.problem.missing.since.description=Since is missing after @since tag
inspection.javadoc.problem.cannot.resolve=Cannot resolve symbol {0}
inspection.javadoc.problem.name.expected=Name expected
inspection.javadoc.problem.wrong.tag=Wrong tag {0}
inspection.javadoc.problem.disallowed.tag=Tag ''{0}'' is not allowed here
inspection.javadoc.method.problem.descriptor=説明がパラメータ {1} の {0} タグにありません。
inspection.javadoc.method.problem.missing.tag.description={0} tag description is missing
inspection.javadoc.method.problem.missing.param.tag=Required tag {0} is missing for parameter {1}
inspection.javadoc.problem.duplicate.param=パラメータ ''{0}'' の @param タグの重複
inspection.javadoc.problem.duplicate.throws=例外 ''{0}'' の @throws または @exception タグの重複
inspection.javadoc.problem.duplicate.tag=@{0} タグの重複
inspection.javadoc.problem.add.tag=Add tag @{0} {1}
inspection.javadoc.problem.add.tag.family=Add missing Javadoc tag
inspection.javadoc.problem.add.param.tag=Add tag @param for parameter ''{0}''

inspection.export.results.abstract=abstract
inspection.export.results.static=static
inspection.export.results.capitalized.class=クラス
inspection.export.results.initializer=初期化子
inspection.export.results.capitalized.interface=インターフェイス
inspection.export.results.capitalized.abstract.class=Abstract クラス
inspection.export.results.abstract.class=abstract クラス
inspection.export.results.implicit.constructor=の暗黙的なコンストラクタ

inspection.problem.resolution=問題の解決
inspection.quickfix.assert.family=アサート
inspection.assert.quickfix=''{0}'' のアサート
inspection.surround.if.quickfix=Surround with ''if ({0} \!\= null)''
inspection.replace.ternary.quickfix=Replace with ''{0} \!\= null ?\:''
inspection.surround.if.family=Surround with if
inspection.dependency.configure.button.text=依存関係ルールの設定

inspection.javadoc.label.text=追加の JavaDoc タグ
inspection.javadoc.dialog.title=追加の JavaDoc タグの編集
inspection.javadoc.html.not.required.label.text=追加の必須でない Html 属性
inspection.javadoc.html.not.required.dialog.title=追加の必須でない Html 属性の編集
inspection.required.attributes.display.name=Missing required attribute

inspection.unused.symbol.check.localvars=Check &Local Variables
inspection.unused.symbol.check.fields=Check &Fields
inspection.unused.symbol.check.methods=Check &Methods
inspection.unused.symbol.check.classes=Check &Classes
inspection.unused.symbol.check.parameters=Check &Parameters

inspection.results.for.profile.toolwindow.title=検査プロファイル ''{0}'' の結果
inspection.export.results.invalidated.item=無効な項目
inspection.export.results.at.line=行
inspection.descriptor.provider.apply.fix=修正 {0} の適用

inspection.export.results.capitalized.location=場所
inspection.export.results.extends.implements=拡張/実装
inspection.export.results.extended.implemented=による拡張/実装
inspection.export.results.extended=による拡張
inspection.export.results.overrides.library.methods=ライブラリ メソッドのオーバーライド
inspection.export.results.overrides.implements=オーバーライド/実装
inspection.export.results.derived.methods=派生メソッド
inspection.export.results.type.references=次はこのタイプを使用します
inspection.export.results.used.from=からの使用
inspection.export.results.uses=次を使用
inspection.export.results.no.problems.found=問題は見つかりません
inspection.export.results.suppress=抑止
inspection.export.results.callees=連鎖の呼び出し
inspection.export.results.anonymous.ref.in.owner=in

inspection.processing.job.descriptor=プロジェクトの使用箇所を処理しています
inspection.processing.job.descriptor1=の外部の使用箇所を処理しています
inspection.processing.job.descriptor2=コードを分析しています

inspection.display.name=スタックトレースを分析...

inspection.action.group.by.severity=重要度別にグループ化
inspection.action.group.by.severity.description=重要度別に検査をグループ化
inspection.no.jdk.error.message=このプロジェクトの JDK は正しく設定されていません。 検査は続行できません。
inspection.progress.title=コードを検査しています...
inspection.no.problems.dialog.title=コード検査
inspection.no.problems.message=疑わしいコードは見つかりませんでした
inspection.problems=問題
inspection.error.loading.message=検査プロファイルの読み込みエラー {0, choice, 0\#from {1}|1\#}
inspection.errors.occurred.dialog.title=Errors Occurred
inspection.profiles.presentable.name=検査プロファイル
inspection.severity=重要度(&S)\:
inspection.description.title=説明
inspection.as=As {0}
inspection.new.profile.dialog.title=新規プロファイルの作成
inspection.unable.to.create.profile.dialog.title=プロファイルを作成できません
inspection.unable.to.create.profile.message=検査プロファイル ''{0}'' は既に存在します
inspection.profile.unnamed=名前未設定
inspection.tool.availability.in.tree.node=(エディタ構文強調表示で使用可能)
inspection.tool.availability.in.tree.node1=([分析] - [コードの検査] で使用可能)
inspection.error.level.popup.menu.title=エラー レベルの選択

inspection.application.starting.up=開始しています...
inspection.done=終了
inspection.capitalized.done=終了
inspection.application.file.cannot.be.found=ファイル {0} が見つかりません
inspection.application.opening.project=プロジェクトを開いています...
inspection.application.initializing.project=プロジェクトを初期化しています...
inspection.application.directory.cannot.be.found=ディレクトリ {0} が見つかりません
inspection.application.project.has.older.format.and.will.be.converted=Project has an older format and will be converted.
inspection.application.project.was.succesfully.converted.old.project.files.were.saved.to.0=Project was succesfully converted. Old project files were saved to {0}
inspection.application.cannot.convert.project.0=Cannot convert project\: {0}
inspection.application.cannot.convert.the.project.the.following.files.are.read.only.0=Cannot convert the project. The following files are read only\: {0}

inspection.comparing.references.display.name=\=\= を equals() の代わりに使用
inspection.comparing.references.use.quickfix=equals() を使用する
inspection.comparing.references.problem.descriptor=疑わしい比較演算子 {0}

inspection.dead.code.display.name=未使用の宣言
inspection.dead.code.option=すべての void main (String args[]) メソッドを自動的にエントリ ポイントに追加する
inspection.dead.code.option2=すべての JUnit テストケースを自動的にエントリ ポイントに追加する
inspection.dead.code.option3=すべてのアプレットを自動的にエントリ ポイントに追加する
inspection.dead.code.option4=すべてのサーブレットを自動的にエントリ ポイントに追加する
inspection.dead.code.option5=非 java ファイルで使用されるクラスを自動的にエントリ ポイントに追加する
inspection.export.results.dead.code=未使用の宣言
inspection.dead.code.comment=// --検査によりコメント アウト
inspection.dead.code.date.comment=// --検査 ({0}) によりコメント アウト
inspection.dead.code.stop.comment=// --検査 STOP ({0}) によりコメント アウト\n
inspection.dead.code.start.comment=// --検査 START ({0}) によりコメント アウト\n
inspection.dead.code.safe.delete.quickfix=セーフ デリート
inspection.dead.code.comment.quickfix=コメント アウト
inspection.dead.code.entry.point.quickfix=エントリ ポイントとして追加する
inspection.dead.code.remove.from.entry.point.quickfix=エントリ ポイントから削除する
inspection.dead.code.entry.points.display.name=エントリ ポイント
inspection.dead.code.export.results.no.instantiations.found=インスタンス化処理が見つかりません
inspection.dead.code.export.results.instantiated.from.heading=からのインスタンス化
inspection.dead.code.problem.synopsis=フィールドは割り当てられません
inspection.dead.code.problem.synopsis1=フィールドは使用されません
inspection.dead.code.problem.synopsis2=フィールドは割り当てられますが、アクセスされません
inspection.dead.code.problem.synopsis3=フィールドは使用されますが、エントリ ポイントから呼び出せません
inspection.dead.code.problem.synopsis4=Field has {0, choice, 1\#1 usage|2\#{0,number} usages} but they are not reachable from entry points.
inspection.dead.code.problem.synopsis6=呼び出し可 {0, choice, 1\#1 usage|2\#{0, number} usages} found in the project code.
inspection.dead.code.problem.synopsis6.suspicious=呼び出し不可 {0, choice, 1\#1 usage|2\#{0, number} usages} found in the project code.
inspection.dead.code.problem.synopsis7.suspicious=呼び出し可能なインスタンス化処理がありません {0, choice, 1\#1 instantiation|2\#{0, number} instantiations} found in the project code.
inspection.dead.code.problem.synopsis8.suspicious=呼び出し可能な実装インスタンス化処理がありません {0, choice, 1\#1 instantiation|2\#{0, number} instantiations} found in the project code.
inspection.dead.code.problem.synopsis9.suspicious=匿名クラス コンテキストは呼び出せません クラスはインスタンス化されません {0, choice, 1\#1 instantiation|2\#{0, number} instantiations} found in the project code.
inspection.dead.code.problem.synopsis7=呼び出し可能なインスタンス化処理があります {0, choice, 1\#1 instantiation|2\#{0, number} instantiations} found in the project code.
inspection.dead.code.problem.synopsis8=呼び出し可能な実装インスタンス化処理があります {0, choice, 1\#1 instantiation|2\#{0, number} instantiations} found in the project code.
inspection.dead.code.problem.synopsis9=Instantiated {0, choice, 1\#1 instantiation|2\#{0, number} instantiations} found in the project code.
inspection.dead.code.problem.synopsis10=匿名クラス宣言コンテキストはエントリ ポイントから呼び出せません クラスはインスタンス化されません
inspection.dead.code.problem.synopsis11=クラス参照が見つかりません クラス static 初期化子は呼び出せません
inspection.dead.code.problem.synopsis12=クラスはインスタンス化処理されますが、エントリ ポイントから呼び出せません
inspection.dead.code.problem.synopsis13=クラスはインスタンス化されません
inspection.dead.code.problem.synopsis14=<ul><li>Abstract メソッドが実装されていない、</li><li>実装クラスがインスタンス化されていない、または</li><li>インスタンス化処理がエントリ ポイントから呼び出せません</li></ul>
inspection.dead.code.problem.synopsis15=<ul><li>メソッド オーナー クラスがインスタンス化されない、または</li><li>インスタンス化処理がエントリ ポイントから呼び出せません</li></ul>
inspection.dead.code.problem.synopsis16=メソッドは使用されません
inspection.dead.code.problem.synopsis17=メソッドは使用されますが、エントリ ポイントから呼び出せない再帰呼び出しに属しています
inspection.dead.code.problem.synopsis18=メソッドはエントリ ポイントから呼び出せません
inspection.dead.code.problem.synopsis19=Neither the class nor {0, choice, 1\#its implementation|2\#{0,number} its implementations} are ever instantiated.
inspection.dead.code.problem.synopsis20=Class has {0, choice, 1\#instantiation|2\#{0,number} instantiations} but they are not reachable from entry points.

#{0} is class or interface (translated)
inspection.dead.code.problem.synopsis21=メソッドは {0} のメンバとして使用されませんが、実装クラスのメンバとして使用されます メソッドが {0} から削除されれば、プロジェクトのコンパイルは可能です
inspection.dead.code.problem.synopsis22=メソッドはライブラリ メソッドをオーバーライドしますが、<ul><li>{0} はインスタンス化されない、または</li><li>{0} のインスタンス化はエントリ ポイントから呼び出せません</li></ul>
inspection.dead.code.problem.synopsis23={0} は実装されません
inspection.dead.code.problem.synopsis24={0} は実装されますが、<ul><li>インスタンス化されない、または</li><li>インスタンス化処理はエントリ ポイントから呼び出せません</li></ul>
inspection.dead.code.problem.synopsis25={0} has {1, choice, 1\#direct or indirect implementation|2\#{1,number} direct or indirect implementations} but <ul><li>they are never instantiated OR</li><li>no instantiations are reachable from entry points.</li></ul>
inspection.dead.code.problem.synopsis26.constructor=コンストラクタは使用されません
inspection.dead.code.problem.synopsis27.constructor=コンストラクタは使用されますが、エントリ ポイントから呼び出せないメンバの再帰呼び出しに属しています
inspection.dead.code.problem.synopsis28.constructor=コンストラクタは使用されますが、エントリ ポイントから呼び出せません
inspection.dead.code.problem.synopsis29.constructor=Constructor has {0, choice, 1\#usage|2\#{0,number} usages} but they are not reachable from entry points.

inspection.dead.code.problem.synopsis26.method=メソッドは使用されません
inspection.dead.code.problem.synopsis27.method=メソッドは使用されますが、エントリ ポイントから呼び出せない再帰呼び出しに属しています
inspection.dead.code.problem.synopsis28.method=メソッドは使用されますが、エントリ ポイントから呼び出せません
inspection.dead.code.problem.synopsis29.method=Method has {0, choice, 1\#usage|2\#{0,number} usages} but they are not reachable from entry points.
inspections.dead.code.entry.points.annotations.list.title=Additional entry points annotations

inspection.duplicates.display.name=重複文字列表現
inspection.duplicates.replace.family.quickfix=置換
inspection.duplicates.replace.quickfix=''{0}'' で置換する
inspection.duplicates.option=最小文字列長(&M)\:

inspection.duplicates.message.in.this.file=(このファイル内)
inspection.duplicates.message.more=... ({0} 以上)
inspection.duplicates.message=<html><body>{0}<br>で見つかった重複文字列表現</body></html>

inspection.compiler.javac.quirks.name=Javac quirks
inspection.compiler.javac.quirks.anno.array.comma.problem=Trailing comma in annotation array initializer may cause compilation error in some Javac versions (e.g. JDK 5 and JDK 6).
inspection.compiler.javac.quirks.anno.array.comma.fix=Remove trailing comma
inspection.compiler.javac.quirks.qualifier.type.args.problem=Generics in qualifier reference may cause compilation error in some Javac versions (e.g. JDK 5 and JDK 6).
inspection.compiler.javac.quirks.qualifier.type.args.fix=Remove generic parameter

inspection.root.node.title=Inspections

# inspection tools list actions:
inspection.tools.action.show.global.inspections.text=グローバル検査の表示
inspection.tools.action.show.global.inspections.description=グローバル検査設定の表示
# hardcoded inspection tools
deprecated.symbol=非推奨のシンボル
unused.import=未使用の import
unused.import.statement=未使用の import 文
unused.symbol=未使用のシンボル
redundant.throws.declaration=Redundant throws declaration
access.static.via.instance=インスタンス参照を通した静的メンバへのアクセス
wrong.package.statement=不正な package 文
illegal.package.dependencies=不正なパッケージ依存関係
unchecked.warning=未チェックの警告

# suppression stuff
suppress.all.for.class=クラスのすべての検査を抑止
suppress.inspection.family=検査の抑止
suppress.inspection.statement=ステートメントの ''{0}'' の抑止
suppress.inspection.class=クラスの ''{0}'' の抑止
suppress.inspection.field=フィールドの ''{0}'' の抑止
suppress.inspection.method=メソッドの ''{0}'' の抑止
inspection.options.action.text=''{0}'' オプションの検査
edit.dependency.rules.family=依存関係ルールの編集
edit.dependency.rules.text=依存関係ルール "{0} " の編集
error.analysis.is.in.progress=エラー分析しています
no.errors.found.in.this.file=このファイルにエラーはありません
edit.options.of.reporter.inspection.family=リポーター検査のオプション編集
edit.options.of.reporter.inspection.text="{0}" 検査プロファイル設定の編集

#Inspection group names
group.names.abstraction.issues=抽象問題
group.names.assignment.issues=代入問題
group.names.probable.bugs=推定されるバグ
group.names.bitwise.operation.issues=ビット操作問題
group.names.class.structure=クラス構造
group.names.class.metrics=クラス メトリクス
group.names.compiler.issues=Compiler issues
group.names.potentially.confusing.code.constructs=潜在的に難解なコード構成
group.names.encapsulation.issues=カプセル化問題
group.names.error.handling=エラー処理
group.names.finalization.issues=終了処理問題
group.names.imports=インポート
group.names.initialization.issues=初期化問題
group.names.internationalization.issues=国際化問題
group.names.junit.issues=JUnit 問題
group.names.logging.issues=ログ問題
group.names.code.maturity.issues=Code maturity 問題
group.names.method.metrics=メソッド メトリクス
group.names.naming.conventions=命名規則
group.names.performance.issues=パフォーマンス問題
group.names.memory.issues=メモリ問題
group.names.java.language.level.issues=Java 言語レベル問題
group.names.portability.issues=可搬性問題
group.names.security.issues=セキュリティ問題
group.names.serialization.issues=シリアライゼーション問題
group.names.code.style.issues=コード スタイル問題
group.names.threading.issues=スレッド化問題
group.names.verbose.or.redundant.code.constructs=詳細または冗長なコード構成
group.names.visibility.issues=可視性問題
group.names.cloning.issues=クローン問題
group.names.resource.management.issues=リソース管理問題
group.names.j2me.issues=J2ME 問題
group.names.control.flow.issues=フロー制御問題
group.names.numeric.issues=数値問題
group.names.language.level.specific.issues.and.migration.aids=Java language level migration aids
group.names.javabeans.issues=JavaBeans 問題
group.names.inheritance.issues=継承問題
group.names.data.flow.issues=データ フロー問題
group.names.declaration.redundancy=宣言の冗長性
group.names.javadoc.issues=Javadoc issues
group.names.concurrency.annotation.issues=Concurrency annotation issues
group.names.javaee.issues=Java EE issues
group.names.properties.files=Properties Files


duplicate.property.display.name=重複するプロパティ
duplicate.property.diff.key.problem.descriptor=異なる値 \#end が重複するプロパティ キー ''{0}'' \:<br>
duplicate.property.diff.key.progress.indicator.text=重複するプロパティ キーを処理しています \: {0}
duplicate.property.key.problem.descriptor=値が重複するプロパティ キー ''{0}'' \#end \:<br>
duplicate.property.key.progress.indicator.text=重複するプロパティ キーを処理しています \:{0}
duplicate.property.value.problem.descriptor=キーが重複するプロパティ値 ''{0}'' \#end \:<br>
duplicate.property.value.progress.indicator.text=重複するプロパティ値を処理しています \: {0}
duplicate.property.diff.key.option=異なる値で重複するキー
duplicate.property.value.option=重複する値
duplicate.property.key.option=重複するキー
duplicate.property.file.scope.option=ファイル スコープ
duplicate.property.module.scope.option=モジュール スコープ
duplicate.property.project.scope.option=プロジェクト スコープ
inspection.javadoc.throws.or.exception.option=@throws または @exception

suppress.inspection.annotation.syntax.error=不正な注釈構文 \: {0}

default.file.template.report.file.header=Report Default file header
default.file.template.report.method.body=Report default created/overridden/implemented method body
default.file.template.report.catch.section=Report default catch section
default.file.template.description=Default File template
default.file.template.display.name=Default File Template Usage
default.file.template.edit.template=Edit template...
default.file.template.replace.with.actual.file.template=Replace with actual file template

#profile stuff
profile.assignments.display.name=Errors
profile.mapping.inspection.profile.column.title=inspection profile
profile.mapping.scope.column.title=scope
boolean.method.is.always.inverted.display.name=Boolean method is always inverted
boolean.method.is.always.inverted.problem.descriptor=Boolean method <code>\#ref</code> is always inverted
inspection.results.title=Results By Editor Settings
unnecessary.module.dependency.display.name=Unnecessary module dependency
unnecessary.module.dependency.problem.descriptor=Module ''{0}'' sources do not depend on module ''{1}'' sources, the dependency between modules could be removed
suspected.module.dependency.problem.descriptor=Dependency from module ''{0}'' on module ''{1}'' could be probably be removed when complementary scope to ''{2}'' also does not contain references on module ''{3}''
run.with.editor.settings.dialog.option=Run with &editor settings
inspection.new.profile.text=New Profile Name
profile.save.as.project.checkbox.title=Save as project profile
profile.save.as.ide.checkbox.title=Save as IDE profile
profile.assignment.repeatable.scope.warning=Repeatable scope. Correct assignments.
profile.ide.profile.radiobutton.title=IDE Profile
profile.project.radiobutton.title=Project Profile
profile.default.profile.title=Default Project Profile
profile.assignments.table.title=Project Inspection Profile Assignments
profile.assignments.browse.scope.button.title=&Browse ...
profile.assignments.browse.profile.scopes.dialog.title=Profiles Scopes
profile.quick.change.suggestion.message=<html>There are a few scopes configured for the project. Do you want to edit profile assignments on them?</html>
profile.quick.change.suggestion.dialog.title=Unable to switch profile
unhandled.exception.in.jsp.name=Unhandled Exception in JSP
inspection.no.modules.error.message=This project contains no modules. Inspection cannot proceed.
inspection.redundant.suppression.name=Redundant suppression
inspection.redundant.suppression.description=Redundant suppression
run.with.choosen.profile.dialog.option=Run with &chosen profile
disable.inspection.action.name=Disable inspection
group.names.packaging.issues=Packaging issues
group.names.dependency.issues=Dependency issues
group.names.modularization.issues=Modularization issues
run.inspection.on.file.intention.text=Run inspection on ...
severities.editor.dialog.title=Severities Editor
highlight.severity.create.dialog.title=New Highlight Severity
highlight.severity.create.dialog.name.label=Name
suspicious.name.combination.display.name=Suspicious variable/parameter name combination
suspicious.name.combination.options.title=Groups of names
suspicious.name.combination.options.prompt=Enter a comma-separated list of names\:
suspicious.name.combination.add.titile=Add Group of Names
suspicious.name.combination.edit.title=Edit Group of Names

special.annotations.list.add.annotation.class=Add Annotation Class
special.annotations.list.annotation.class=Annotation Class
special.annotations.list.remove.annotation.class=Remove Annotation Class
dependency.injection.annotations.list=Additional Dependency Injection Annotations
special.annotations.annotations.list=Additional Special Annotations

inspection.filter.resolved.action.text=Filter resolved items
inspection.filter.show.diff.action.text=Show diff
inspection.duplicate.throws.display.name=Duplicate throws
inspection.duplicate.throws.problem=Duplicate throws
inspection.duplicate.throws.more.general.problem=There is a more general exception, ''{0}'', in the throws list already.
inspection.duplicate.throws.ignore.subclassing.option=Ignore exceptions subclassing others
inspection.filter.show.diff.only.action.text=Show diff only
inspection.new.profile.ide.to.project.warning.message=Do you want to save selected IDE profile as project profile?
inspection.new.profile.ide.to.project.warning.title=Unable to set up IDE profile for scope
profile.project.settings.banner=Project Profiles Settings
profile.project.display.name=Project Profiles
profile.banner.text=Inspection profile\: {0} {1, choice, 0\#(inactive)|1\#}
profile.ide.tree.text=IDE Profiles
profile.ide.settings.banner=IDE Profiles Settings
profile.project.settings.disable.text=< Use IDE Profile >
errors.single.profile.title=Errors\: ''{0}'' inspection profile
rename.inspection.profile=Rename inspection profile
rename.message.prefix.inspection.profile=Inspection profile
default.ide.profile.label.text=Default IDE profile\:
profile.lock.action.text=Lock
profile.unlock.action.text=Unlock
profile.activate.action.text=Set as project default
profile.project.activate.action.text=Set as IDE default
inspection.annotate.quickfix.overridden.method.messages=Method {0} {1} method {2}.\nAnnotate the base method as well?
inspection.annotate.quickfix.overridden.method.warning=Overridden Method Warning
inspection.annotate.quickfix.implements=implements
inspection.annotate.quickfix.overrides=overrides
offline.inspections.jdk.not.found={0} not found
offline.inspections.module.jdk.not.found=Please, specify sdk ''{0}'' for module ''{1}''
inconsistent.resource.bundle.display.name=Inconsistent Resource Bundle
inconsistent.bundle.property.error=Inconsistent property ''{0}''. Must be defined in the parent file ''{1}''.
inconsistent.bundle.untranslated.property.error=Untranslated property ''{0}''. Should be overridden in the ''{1}''.
inconsistent.bundle.report.missing.translations=Report &missing translations
inconsistent.bundle.report.inconsistent.properties=Report &inconsistent properties
inconsistent.bundle.report.duplicate.properties.values=Report properties &overridden with the same value
inconsistent.bundle.property.inherited.with.the.same.value=Property inherited from the ''{0}'' file with the same value
edit.inspection.options=Edit ''{0}'' Options
offline.view.title=Offline View
offline.view.editor.settings.title=Editor Settings
offline.view.parse.exception.title=Nothing found to display
parsing.inspections.dump.progress.title=Parsing inspections XML dump

suppress.inspection.problem=Suppress
inspections.view.options.title=Inspection {0} options
inspections.result.view.exclude.action.text=Exclude
inspections.result.view.include.action.text=Include
xml.suppressable.for.tag.title=Suppress for tag
xml.suppressable.for.file.title=Suppress for file
xml.suppressable.all.for.file.title=Suppress all for file
annotate.overridden.methods.as.notnull=Annotate overridden methods as ''@{0}''
nullable.stuff.problems.overridden.methods.are.not.annotated=Overridden methods are not annotated
nullable.stuff.problems.overridden.method.parameters.are.not.annotated=Overridden method parameters are not annotated
annotate.overridden.methods.parameters=Annotate overridden method parameters as ''@{0}''
offline.inspections.library.was.not.resolved=Please configure library ''{0}'' which is used in module ''{1}''
report.suspicious.but.possibly.correct.method.calls=&Report suspicious but possibly correct method calls
unused.library.display.name=Unused library
unused.library.problem.descriptor=Unused library ''{0}''
unused.library.roots.problem.descriptor=Unused roots {0} from library ''{1}''
unused.library.backward.analysis.job.description=Perform backward analysis
inspection.duplicates.option.report.propertykey.expressions=&Ignore @PropertyKey expressions
inspection.same.parameter.fix.name=Inline value ''{1}'' for parameter ''{0}''
fix.all.inspection.problems.in.file=Fix all ''{0}'' problems
severities.default.settings.message=Edit Settings|Colors \\& Fonts
unsupported.character.for.the.charset=Unsupported characters for the charset ''{0}''
lossy.encoding=Lossy encoding
inspection.unused.symbol.public.method.parameters=Check parameters in &Non-private methods
introduce.constant.across.the.project=Introduce Constant Across the Project
inspection.application.chosen.profile.log\ message=Inspecting with profile ''{0}''
detach.library.quickfix.name=Detach library
detach.library.roots.quickfix.name=Detach unused library roots
inspection.javadoc.problem.pointing.to.itself=Javadoc pointing to itself

inspection.redirect.template=<html><body>Injected element has problem\: {0} (in <a href\="\#navigation/{1}\:{2}">{3}</a>). </body></html>
nothing.found=Nothing found
special.annotations.list.annotation.pattern=Add Annotations Pattern

inspection.variable.assigned.to.itself.display.name=Variable is assigned to itself
assignment.to.itself.problem.descriptor=Variable ''{0}'' is assigned to itself
assignment.to.declared.variable.problem.descriptor=Variable ''{0}'' is initialized with self assignment
