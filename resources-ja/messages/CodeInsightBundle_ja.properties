codeinsight.settings=CodeInsight 設定
error.hint.file.is.readonly=ファイル {0} は読み取り専用です
error.dialog.readonly.file.title=ファイルは読み取り専用です
error.dialog.readonly.files.title=読み取り専用ファイルは変更できません
error.dialog.readonly.files.message={0} には読み取り専用ファイルがあります。\nその他すべてのファイルを処理しますか ?
process.scope.directory=ディレクトリ ''{0}''
process.scope.project=プロジェクト ''{0}''
process.scope.module=モジュール ''{0}''
reformat.code.accept.button.text=実行
process.scope.file=ファイル {0}
reformat.option.selected.text=選択したテキスト
reformat.option.all.files.in.directory=ディレクトリ {0} のすべてのファイル
reformat.option.include.subdirectories=サブディレクトリを含む
reformat.option.optimize.imports=インポートの最適化
reformat.option.rearrange.entries=&Rearrange entries
reformat.option.vcs.changed.region=Only &VCS changed text
reformat.progress.file.with.known.name.text=Reformatting {0}
reformat.and.optimize.progress.common.text=Preparing imports...
reformat.progress.common.text=Reformatting code...
process.optimize.imports=インポートの最適化
process.optimize.imports.before.commit=Optimize Imports Before Commit
progress.text.optimizing.imports=インポートを最適化しています...
progress.reformat.and.optimize.common.command.text=Reformat and Optimize Imports
progress.reformat.stage.wrapping.blocks=Preparing...
progress.reformat.stage.processing.blocks=Calculating changes...
progress.reformat.stage.applying.changes=Storing changes...
process.reformat.code=コードの再フォーマット
process.reformat.code.before.commit=Reformat Code Before Commit
dialog.reformat.files.title=ファイルの再フォーマット
dialog.reformat.files.optimize.imports.checkbox=インポートの最適化(&O)
dialog.reformat.files.reformat.selected.files.label=選択したファイルを再フォーマットしますか ?
command.name.typing=入力
dialog.import.on.paste.title=インポートするクラスの選択
dialog.import.on.paste.title2=インポートする要素の選択
dialog.paste.on.import.text=貼り付けたコード フラグメントは、新しいコンテキストのインポートで\nアクセスできないクラスを使用しています。\n新規ファイルにインポートするクラスを選択してください。
dialog.paste.on.import.text2=貼り付けたコード フラグメントは、新しいコンテキストのインポートで\nアクセスできない要素を使用しています。\n新規ファイルにインポートする要素を選択してください。
paste.data.flavor.folding=FoldingData
paste.dataflavor.referencedata=ReferenceData
generate.constructor.fields.chooser.title=コンストラクタで初期化するフィールドを選択してください
error.attempt.to.generate.constructor.for.anonymous.class=コンストラクタを匿名クラスに追加できません
generate.constructor.super.constructor.chooser.title=スーパー クラス コンストラクタの選択
generate.delegate.method.chooser.title=委譲を生成するメソッドの選択
generate.delegate.target.chooser.title=委譲を生成するターゲットの選択
generate.equals.and.hashcode.already.defined.warning=メソッド ''boolean equals(Object)'' および ''int hashCode()'' は既に定義されています。\nクラス \:{0} 削除および続行しますか ?
generate.equals.and.hashcode.already.defined.warning.anonymous=メソッド 'boolean equals(Object)' および 'int hashCode()' は既に\nこの匿名クラスで定義されています。 削除および続行しますか ?
generate.equals.and.hashcode.already.defined.title=equals() と hashCode() の生成
generate.equals.and.hashcode.error.no.object.class.message=equals() と hashCode() を生成できません。\njava.lang.Object クラスがありません。
generate.equals.and.hashcode.error.no.object.class.title=java.lang.Object がありません
generate.equals.compare.nested.arrays.comment=// Compare nested arrays - values of {0} here
generate.equals.compare.arrays.comment=// Probably incorrect - comparing Object[] arrays with Arrays.equals
generate.getter.setter.title=Getters および Setters を生成するフィールドの選択
generate.getter.fields.chooser.title=Getters を生成するフィールドの選択
generate.setter.fields.chooser.title=Setters を生成するフィールドの選択
override.implement.broken.file.template.message="上書き/実装メソッド ボディ" テンプレートを修正してください
override.implement.broken.file.template.title=ファイル テンプレート エラー
methods.to.implement.chooser.title=実装するメソッドの選択
methods.to.override.chooser.title=オーバーライドするメソッドの選択
methods.to.override.implement.chooser.title=Select Methods to Override/Implement
generate.list.popup.title=生成
surround.with.cast.template=((Type)expr)
surround.with.dowhile.template=do / while
surround.with.for.template=for
surround.with.ifelse.expression.template=if (expr) {...} else {...}
surround.with.ifelse.template=if / else
surround.with.if.expression.template=if (expr) {...}
surround.with.if.template=if
surround.with.not.instanceof.template=\!(expr instanceof Type)
surround.with.not.template=\!(expr)
surround.with.parenthesis.template=(expr)
surround.with.runnable.template=実行可能
surround.with.synchronized.template=synchronized
surround.with.try.catch.finally.template=try / catch / finally
surround.with.try.catch.template=try / catch
surround.with.try.catch.incorrect.template.message=Catch ボディの無効なファイル テンプレート
surround.with.try.catch.incorrect.template.title=Try / Catch で囲む
surround.with.try.finally.template=try / finally
surround.with.while.template=while
surround.with.runtime.type.template=((RuntimeType)expr)
surround.with.chooser.title=囲む
unwrap.popup.title=Choose the statement to unwrap/remove
unwrap.if=Unwrap 'if...'
unwrap.else=Unwrap 'else...'
remove.else=Remove 'else...'
unwrap.while=Unwrap 'while...'
unwrap.for=Unwrap 'for...'
unwrap.braces=Unwrap braces
unwrap.try=Unwrap 'try...'
unwrap.conditional=Unwrap 'f ? a \: b'
remove.catch=Remove 'catch...'
unwrap.synchronized=Unwrap 'synchronized...'
unwrap.with.placeholder=Unwrap ''{0}''
unwrap.anonymous=Unwrap 'anonymous...'
generate.equals.hashcode.wizard.title=equals() と hashCode() の生成
generate.equals.hashcode.equals.fields.chooser.title=equals() に含めるフィールドの選択
generate.equals.hashcode.hashcode.fields.chooser.title=hashCode() に含めるフィールドの選択
generate.equals.hashcode.non.null.fields.chooser.title=すべての非 NULL フィールドの選択
generate.equals.hashcode.accept.sublcasses=Accept &subclasses as parameter to equals() method
generate.equals.hashcode.accept.sublcasses.explanation=<html><body>While generally incompliant to Object.equals() specification accepting<br>subclasses might be necessary for generated \
method to work correctly<br>with frameworks, which generate Proxy subclasses like Hibernate.</body></html>
generate.equals.hashcode.internal.error=内部エラー
generate.equals.warning.equals.for.nested.arrays.not.supported=ネストされた配列 equals() はサポートされていません
generate.equals.warning.generated.equals.could.be.incorrect=生成された Object[] の equals() は不正です
generate.equals.hashcode.warning.hashcode.for.arrays.is.not.supported=配列の hashCode () はサポートされていません
highlight.thrown.exceptions.chooser.all.entry=すべて表示
highlight.exceptions.thrown.chooser.title=強調表示する例外クラスの選択
highlight.exceptions.thrown.notfound=No exceptions thrown in the method found
status.bar.exit.points.highlighted.message={0} exit {0, choice, 1\#point|2\#points} highlighted (Esc キーで強調表示をクリアします)
status.bar.highlighted.usages.message={0} {0, choice, 1\#usage|2\#usages} of {1} found (Esc キーで強調表示をクリアします)
status.bar.highlighted.usages.no.target.message={0} {0, choice, 1\#usage|2\#usages} found (Esc キーで強調表示をクリアします)
status.bar.overridden.methods.highlighted.message={0} overridden {0, choice, 1\#method|2\#methods} found (press {1} again to remove the highlighting, Escape to remove all highlighting)
status.bar.highlighted.usages.not.found.message={0} の使用箇所は見つかりません
status.bar.highlighted.usages.not.found.no.target.message=使用箇所は見つかりません
parameter.info.no.parameters=<パラメータなし>
xml.tag.info.no.attributes=<属性なし>
n.of.m={1} の {0}
quick.definition.back=戻る
quick.definition.forward=次へ
quick.definition.edit.source=ソースの編集
quick.definition.show.source=ソースの表示
i18n.quickfix.property.panel.title=プロパティ情報
i18n.quickfix.property.panel.update.all.files.in.bundle.checkbox=リソース バンドル内のすべてのプロパティ ファイルを更新する(&R)
i18n.quickfix.property.panel.properties.file.label=プロパティ ファイル(&P)\:
i18n.quickfix.property.panel.property.value.label=プロパティ値(&V)\:
i18n.quickfix.property.panel.property.key.label=プロパティ キー(&K)\:
i18n.quickfix.code.panel.title=Java コード情報
i18n.quickfix.code.panel.resource.bundle.expression.label=リソース バンドル式(&E)\:
i18n.quickfix.preview.panel.title=プレビュー
quickfix.i18n.concatentation=ハード コード文字列表現を含む文字列結合の国際化
quickfix.i18n.concatentation.error=String concatenation not found
quickfix.i18n.command.name=国際化
inspection.i18n.display.name=ハード コード文字列
inspection.i18n.option.ignore.assert=アサート文引数の無視
inspection.i18n.option.ignore.for.exception.constructor.arguments=例外コンストラクタ引数の無視
inspection.i18n.option.ignore.for.specified.exception.constructor.arguments=指定した例外コンストラクタ引数の無視
inspection.i18n.option.ignore.for.junit.assert.arguments=JUnit アサート引数の無視
inspection.i18n.option.ignore.qualified.class.names=既存の修飾クラス名と同じ値を持つリテラルを無視
inspection.i18n.option.ignore.property.keys=既存のプロパティ キーと同じ値を持つリテラルを無視
inspection.i18n.option.ignore.nonalphanumerics=アルファベット文字を含まないリテラルを無視
inspection.i18n.quickfix=ハード コード文字列リテラルの国際化
inspection.i18n.message.general.with.value=ハード コード文字列リテラル \: ''{0}''
inspection.unresolved.property.key.reference.name=無効なプロパティ キー
inspection.unresolved.property.key.reference.message=文字列リテラル ''{0}'' は有効なプロパティ キーではありません
inspection.invalid.resource.bundle.reference=Invalid resource bundle reference ''{0}''
i18nize.dialog.title=文字列リテラルの国際化
i18nize.dialog.error.jdk.message=クラス 'java.util.ResourceBundle' がありません。\n正しい JDK をセットアップしてください。
i18nize.dialog.error.jdk.title=クラスがありません
i18nize.dialog.property.file.chooser.title=プロパティ ファイルの選択
i18nize.dialog.template.link.label=国際化テンプレートの編集
i18nize.dialog.error.property.already.defined.message=プロパティ ''{0}'' は既にファイル ''{1}'' に存在します
i18nize.dialog.error.property.already.defined.title=プロパティは既に存在します
intention.split.declaration.family=宣言の分解
intention.split.declaration.text=別々の宣言に分解する
intention.split.declaration.assignment.text=宣言文と代入文に分解する
intention.add.override.annotation='@Override' 注釈の追加
intention.add.override.annotation.family=Override 注釈の追加
intention.make.type.generic.family=ジェネリック タイプの指定
intention.make.type.generic.text={0} のタイプを {1} に変更
intention.split.if.family=If 文を分解する
intention.split.if.text=2 つの If に分解する
intention.introduce.variable.text=Introduce local variable
intention.encapsulate.field.text=Encapsulate field
intention.implement.abstract.method.family=抽象メソッドの実装
intention.implement.abstract.method.text=メソッド ''{0}'' の実装
intention.override.method.text=Override method ''{0}''
intention.add.annotation.family=注釈の追加
intention.add.on.demand.static.import.family=オンデマンド static インポートの追加
intention.add.on.demand.static.import.text=''{0}'' のオンデマンド static インポートの追加
intention.add.single.member.static.import.family=シングル メンバ static インポートの追加
intention.add.single.member.static.import.text=''{0}'' の static インポートの追加
intention.replace.concatenation.with.formatted.output.family=結合する部分をフォーマットされた出力に置き換える
intention.replace.concatenation.with.formatted.output.text=+ を java.text.MessageFormat 呼び出しに置換
intention.color.chooser.dialog=Choose Color
intention.convert.to.basic.latin=Convert to Basic Latin
intention.surround.resource.with.ARM.block=Surround with try-with-resources block
dialog.create.field.from.parameter.title=フィールドの作成
dialog.create.field.from.parameter.already.exists.text=既存のフィールド {0} を使用しますか ?
dialog.create.field.from.parameter.already.exists.title=フィールドは既に存在します
dialog.create.field.from.parameter.field.type.label=タイプ {0} のフィールド
dialog.create.field.from.parameter.field.name.label=名前 \:
dialog.create.field.from.parameter.declare.final.checkbox=final の宣言
dialog.create.class.destination.package.label=パッケージ作成先 \:
dialog.create.class.package.chooser.title=パッケージ作成先の選択
create.directory.command=ディレクトリの作成
dialog.create.class.label=Create {0}\:
dialog.create.class.name=Create {0} {1}
intention.implement.abstract.class.family=抽象クラスまたはインターフェイスの実装
intention.implement.abstract.class.default.text=抽象クラスの実装
intention.implement.abstract.class.interface.text=インターフェイスの実装
intention.implement.abstract.class.subclass.text=Create Subclass
intention.error.cannot.create.class.message=Cannot Create Class ''{0}''
intention.error.cannot.create.class.title=Failed to Create Class
intention.assign.field.from.parameter.text=フィールド ''{0}'' へのパラメータ代入
intention.assign.field.from.parameter.family=フィールドへのパラメータ代入
intention.create.field.from.parameter.text=パラメータ ''{0}'' のフィールド作成
intention.create.field.from.parameter.family=パラメータ用のフィールド作成
intention.bind.fields.from.parameters.text=Bind {0} Parameters to Fields
intention.bind.fields.from.parameters.family=Bind Parameters to Fields
intention.implement.abstract.method.searching.for.descendants.progress=子孫を検索しています...
intention.implement.abstract.method.error.no.classes.message=このメソッドを実装できるクラスはありません
intention.implement.abstract.method.error.no.classes.title=クラスがありません
intention.implement.abstract.method.class.chooser.title=クラスの実装の選択
intention.implement.abstract.method.command.name=メソッドの実装
intention.invert.if.condition=If 条件を反転させる
intention.extract.if.condition.text=Extract if ({0})
intention.extract.if.condition.family=Extract If Condition
intention.underscores.in.literals.family=Underscores in numeric literals
intention.remove.literal.underscores=Remove underscores from literal
intention.insert.literal.underscores=Insert underscores into literal
intention.replace.cast.with.var.text=Replace ''{0}'' with ''{1}''
intention.replace.cast.with.var.family=Replace cast with variable
intention.convert.color.representation.text=Convert to ''new Color{0}''
intention.convert.color.representation.family=Convert Color representation
intention.break.string.on.line.breaks.text=Break string on '\\n'


intention.create.test=Create Test
intention.create.test.dialog.testing.library=Testing library\:
intention.create.test.dialog.language=Language\:
intention.create.test.dialog.class.name=Class name\:
intention.create.test.dialog.super.class=Superclass\:
intention.create.test.dialog.choose.super.class=Choose Superclass
intention.create.test.dialog.generate=Generate\:
intention.create.test.dialog.show.inherited=Show inherited methods
intention.create.test.dialog.select.methods=Generate test methods for\:
intention.create.test.dialog.library.not.found={0} library not found in the module
intention.create.test.dialog.fix.library=Fix
intention.create.test.dialog.java=Java

lightbulb.tooltip={0} をクリックまたは押下
dialog.intention.settings.intention.list.title=インテンション リスト
dialog.intention.settings.description.panel.title=説明
dialog.intention.settings.description.usage.example.title=<html><body><center><b>使用例 \:</b></center></body></html>
intention.settings=インテンション 設定
intention.settings.category.text=<html><body><font face\="verdana" size\="-1">\
  <center>インテンション カテゴリ ''<b>{0}</b>'' を選択しました。</center>\
  <center>チェックボックスをクリックして、このカテゴリ内のすべてのインテンションの有効/無効を切り替えます。</center>\
  <center>個別のインテンションの有効/無効を切り替えるには、このカテゴリの中のインテンションを選択します。</center>\
  </font></body></html>
javadoc.description.copied.from.interface=インターフェイスからコピーする説明 \:
javadoc.description.copied.from.class=クラスからコピーする説明 \:
javadoc.deprecated=非推奨
javadoc.since=以来 \:
javadoc.see.also=参照 \:
javadoc.parameters=パラメータ \:
javadoc.returns=戻り値 \:
javadoc.throws=スロー \:
javadoc.method.in.interface=インターフェイス {1} の {0}
javadoc.method.in.class=クラス {1} の {0}
javadoc.method.overrides=オーバーライド \:
javadoc.method.specified.by=指定 \:
javadoc.external.fetch.error.message=リモート JavaDocs をフェッチできません \: {0}
searching.for.implementations=実装を検索しています...

goto.implementation.chooserTitle=<html><body>Choose Implementation of <b>{0}</b> ({1} found)</body></html>
goto.implementation.findUsages.title=Implementations of {0}
goto.implementation.notFound=No implementations found

goto.test.chooserTitle.test=<html><body>Choose Test for <b>{0}</b> ({1} found)</body></html>
goto.test.findUsages.test.title=Tests for {0}
goto.test.chooserTitle.subject=<html><body>Choose Test Subject for <b>{0}</b> ({1} found)</body></html>
goto.test.findUsages.subject.title=Test Subjects for {0}
goto.test.notFound=No test subjects found

incremental.search.tooltip.prefix=検索 \:
goto.super.method.chooser.title=スーパー メソッドの選択
goto.super.method.findUsages.title=Super methods of {0}
goto.super.class.chooser.title=スーパー クラスまたはインターフェイスの選択
javadoc.action.back=戻る
javadoc.action.forward=次へ
javadoc.action.view.external=外部 JavaDoc の参照
javadoc.documentation.not.found.message=この要素のドキュメントはありません。\nAPI docs に必要なすべてのパスを [プロジェクト設定] で追加してください。
javadoc.documentation.not.found.title=ドキュメントなし
javadoc.fetching.progress=JavaDocs をフェッチしています....
no.documentation.found=ドキュメントがありません。
javadoc.candiates=<html>メソッド呼び出し <b>{0}</b> の候補 \:<br><br>{1}</html>
javadoc.candidates.not.found=<html>メソッド呼び出し <b>{0}</b> の候補はありません。</html>
declaration.navigation.title={0} の宣言に移動
template.shortcut.enter=Enter
template.shortcut.tab=Tab
template.shortcut.space=Space
dialog.edit.live.template.title=ライブ テンプレートの編集
dialog.add.live.template.title=Add Live Template
templates.no.defined=コンテキストに定義されたテンプレートはありません
templates.surround.no.defined=No surround templates defined in this context
templates.no.defined.with.prefix=コンテキストに定義された ''{0}'' で始まるテンプレートはありません
templates.settings.page.title=ライブ テンプレート
templates.select.template.chooser.title=テンプレートの選択
templates.export.display.name=コード テンプレート
templates.dialog.edit.variables.title=テンプレート変数の編集
templates.dialog.edit.variables.border.title=変数
templates.dialog.edit.variables.action.move.up=上へ移動(&U)
templates.dialog.edit.variables.action.move.down=下へ移動(&D)
templates.dialog.edit.variables.table.column.name=名前
templates.dialog.edit.variables.table.column.expression=式
templates.dialog.edit.variables.table.column.default.value=デフォルト値
templates.dialog.edit.variables.table.column.skip.if.defined=定義済みはスキップ
templates.dialog.table.column.abbreviation=略称
templates.dialog.table.column.description=説明
templates.dialog.table.column.active=アクティブ
templates.dialog.shortcut.chooser.label=デフォルトで展開
dialog.copy.live.template.title=ライブ テンプレートのコピー
dialog.edit.template.shortcut.default=デフォルト ({0})
dialog.edit.template.template.text.title=テンプレート テキスト
dialog.edit.template.button.edit.variables=変数の編集
dialog.edit.template.label.abbreviation=略称(&A)\:
dialog.edit.template.label.group=グループ(&G)\:
dialog.edit.template.label.description=説明(&D)\:
dialog.edit.template.options.title=オプション
dialog.edit.template.label.expand.with=展開
dialog.edit.template.checkbox.reformat.according.to.style=スタイルに応じて再フォーマット(&R)
dialog.edit.template.checkbox.shorten.fq.names=完全修飾名を短くする(&F)
dialog.edit.template.checkbox.use.static.import=Use static &import if possible
dialog.edit.template.context.title=コンテキスト
dialog.edit.template.checkbox.html=HTML(&H)
dialog.edit.template.checkbox.xml=XML(&X)
dialog.edit.template.checkbox.jsp=JSP(&P)
dialog.edit.template.checkbox.smart.type.completion=スマート タイプ補完(&O)
dialog.edit.template.error.title=保存できません
dialog.edit.template.error.malformed.abbreviation=テンプレートを保存できません。\nテンプレートの略称には文字、数値、およびドットのみ使用できます。
dialog.edit.template.error.already.exists=テンプレートを保存できません。\nテンプレートの略称 "{0}"\nは既にグループ "{1}" に存在します。\n他の略称をつけてください。
finish.template.command=テンプレートの終了
insert.code.template.command=コード テンプレートの挿入
template.next.variable.command=次のコード テンプレート タブに移動
template.previous.variable.command=前のコード テンプレート タブに移動
macro.array.variable=arrayVariable()
macro.capitalize.string=capitalize(String)
macro.cast.to.left.side.type=castToLeftSideType()
macro.classname=className()
macro.component.type.of.array=componentTypeOf(Array)
macro.current.package=currentPackage()
macro.decapitalize.string=decapitalize()
macro.firstWord.string=firstWord(String)
macro.undescoresToSpaces.string=underscoresToSpaces(String)
macro.undescoresToCamelCase.string=underscoresToCamelCase(String)
macro.capitalizeAndUnderscore.string=capitalizeAndUnderscore(String)
macro.descendant.classes.enum=descendantClassesEnum(String)
macro.enum=enum(...)
macro.expected.type=expectedType()
macro.groovy.script=groovyScript("groovy code")
macro.guess.element.type.of.container=guessElementType(Container)
macro.iterable.component.type=iterableComponentType(ArrayOrIterable)
macro.iterable.variable=iterableVariable()
macro.linenumber=lineNumber()
macro.methodname=methodName()
macro.method.parameters=methodParameters()
macro.qualified.class.name=qualifiedClassName()
macro.right.side.type=rightSideType()
macro.suggest.index.name=suggestIndexName()
macro.suggest.variable.name=suggestVariableName()
macro.suggest.first.variable.name=suggestFirstVariableName()
macro.variable.of.type=variableOfType(Type)
macro.file.name=fileName()
macro.file.name.without.extension=fileNameWithoutExtension()
command.name.surround.with.runtime.cast=ランタイム キャストで囲む
inspection.i18n.expression.is.invalid.error.message=国際化式テンプレートは有効な式ではありません
inspection.error.dialog.title=エラー
livetemplate.description.tag.pair=タグの組
livetemplate.description.itar=配列要素の繰り返し
livetemplate.description.itco=java.util.Collection の要素の繰り返し
livetemplate.description.iten=java.util.Enumeration の繰り返し
livetemplate.description.itit=java.util.Iterator の繰り返し
livetemplate.description.itli=java.util.List の要素の繰り返し
livetemplate.description.ittok=文字列からのトークンの繰り返し
livetemplate.description.itve=java.util.Vector の要素の繰り返し
livetemplate.description.ritar=配列要素の逆方向の繰り返し
livetemplate.description.iter=繰り返し可能 | J2SDK 5.0 構文内の配列の繰り返し
livetemplate.description.itover=Iterate over an Iterable or Array selection in J2SDK 5.0 syntax
livetemplate.description.inst=instanceof でオブジェクト タイプをチェックしてダウンキャストする
livetemplate.description.lst=配列の最終要素をフェッチする
livetemplate.description.mn=変数に小さい値を設定する
livetemplate.description.mx=変数に大きな値を設定する
livetemplate.description.psvm=main() メソッド宣言
livetemplate.description.toar=java.util.Collection の要素を配列に格納する
livetemplate.description.lazy=Performs lazy initialization
livetemplate.description.if.not.null=Inserts ''if not null'' statement
livetemplate.description.if.null=Inserts ''if null'' statement
livetemplate.description.geti=Inserts singleton method getInstance
livetemplate.description.serr=文字列を System.err に出力する
livetemplate.description.sout=文字列を System.out に出力する
livetemplate.description.souf=Prints a formatted string to System.out
livetemplate.description.soutm=現在のクラスとメソッド名を System.out に出力する
livetemplate.description.soutp=Prints method parameter names and values to System.out
livetemplate.description.soutv=値を System.out に出力する
livetemplate.description.st=String
livetemplate.description.psf=public static final
livetemplate.description.psfi=public static final int
livetemplate.description.psfs=public static final String
livetemplate.description.thr=throw new
livetemplate.description.surround.braces={} で囲む
livetemplate.description.surround.parens=() で囲む
livetemplate.description.surround.tag=<tag></tag> で囲む
livetemplate.description.surround.tag.in.htmlorjsp=Surround with <tag></tag> in HTML/JSP
livetemplate.description.surround.cdata.in.xmlorhtmlorjsp=Surround with CDATA section
livetemplate.description.surround.with.callable=Surround with Callable
livetemplate.description.surround.with.read.lock=Surround with ReadWriteLock.readLock
livetemplate.description.surround.with.write.lock=Surround with ReadWriteLock.writeLock
quickfix.add.variable.text=変数 ''{0}'' の初期化
quickfix.add.variable.family.name=変数の初期化
inspection.i18n.quickfix.annotate.as=Annotate as @{0}
inspection.i18n.quickfix.annotate.element.as=Annotate {0} ''{1}'' as @{2}
disable.intention.action=''{0}'' を無効にする
enable.intention.action=''{0}'' を有効にする
under.construction.string=Under construction.
inspection.i18n.option.ignore.comment.pattern=Ignore lines containing this comment (pattern in java.util.Pattern format)\:
inspection.i18n.option.ignore.comment.title=Non-Nls comment pattern
inspection.i18n.option.ignore.assigned.to.constants=Ignore literals assigned to constants
inspection.i18n.option.ignore.tostring=Ignore contents of toString() method
intention.move.initializer.to.constructor=Move initializer to constructor
intention.move.initializer.to.set.up=Move initializer to setUp method
intention.move.field.assignment.to.declaration=Move assignment to field declaration
i18nize.jsp.error=Please select JSP text to I18nize.\nMake sure you have not selected any scriptlets, custom tags or other foreign languages elements.\nAlso, HTML tags inside selection must be balanced.
i18nize.error.title=Cannot I18nize Selection
i18nize.error.message=You can only i18nize Java string literal or substring thereof.\nPlease point the caret inside Java string literal or select part of it.
display.coverage.prompt=Do you want to display coverage data for ''{0}''?
code.coverage=Code Coverage
coverage.button.add.package=Add Package
coverage.pattern.filter.editor.choose.package.title=Choose Package
no.coverage=No coverage
code.coverage.is.not.supported=Code coverage is supported for jre 5.0 or higher
title.popup.show.coverage=Coverage Suites
prompt.remove.coverage=Do you want to remove ''{0}'' coverage data?
title.remove.coverage.data=Remove Coverage Data
coverage.data.outdated=Coverage data outdated
coverage.data.not.found=Coverage data not found
error.cannot.resolve.class=Cannot resolve class ''{0}''
implementation.view.title=Definition of {0}
javadoc.info.title=Documentation for {0}
intention.intercept.ejb.method.or.class.family=Add EJB interceptor
intention.intercept.ejb.method.or.class.class.text=Add interceptor for EJB class ''{0}''
intention.intercept.ejb.method.or.class.method.text=Add interceptor for business method ''{0}''
intention.edit.interceptor.binding.family=Interceptor Bindings
intention.edit.interceptor.binding.text=Edit Interceptor ''{0}'' bindings
powered.by=Powered by
powered.by.plugin=''{0}'' plugin.
error.cannot.convert.default.message=Invalid value\: ''{0}''
error.cannot.resolve.default.message=Cannot resolve symbol ''{0}''
error.cannot.resolve.0.1=Cannot resolve {0} ''{1}''
error.unknown.enum.value.message=Unknown enum value ''{0}''
i18nize.cant.create.properties.file.because.its.name.is.associated=Can''t create properties file ''{0}'' because its name is associated with the {1}.
i18nize.error.creating.properties.file=Error creating properties file
node.method.tooltip=Method
node.field.tooltip=Field
node.annotation.tooltip=Annotation
node.anonymous.class.tooltip=Anonymous Class
node.enum.tooltip=Enum
node.exception.tooltip=Exception
node.interface.tooltip=Interface
node.junit.test.tooltip=JUnit Test
node.runnable.class.tooltip=Runnable Class
node.class.tooltip=Class
node.excluded.flag.tooltip=Excluded
node.abstract.flag.tooltip=Abstract
node.final.flag.tooltip=Final
node.static.flag.tooltip=Static
multiple.implementations.tooltip=Multiple implementations
static.class.initializer={0}class initializer

# suppress inspection "UnusedProperty"
intentions.category.ejb=EJB
set.language.level=Set language level
set.language.level.to.0=Set language level to {0}
remove.annotation=Remove annotation
deannotate.intention.action.text=Deannotate
deannotate.intention.chooser.title=Choose annotation to delete
javadoc.type.parameters=Type parameters\:
highlight.overridden.classes.chooser.title=Choose Classes to Highlight Overridden Methods from
no.methods.overriding.0.are.found=No methods overriding {0, choice, 0\#|1\# '{1}'|2\#these classes} are found
copy.abstract.method.no.existing.implementations.found=No existing implementations found
copy.abstract.method.intention.name=Use existing implementation of ''{0}''
copy.abstract.method.popup.title=Choose implementation to copy
copy.abstract.method.title=Use Abstract Method Implementation
i18nize.empty.file.path=Please specify properties file path
choose.type.popup.title=Choose Type
cast.expression=Cast expression
cast.to.0=Cast to ''{0}''
class.completion.file.path=Press {0} again to search for all matching project files
class.completion.file.path.all.variants=Press {0} to search for matching files of any type
property.has.more.parameters.than.passed=Property ''{0}'' expected {1} {1, choice, 1\#parameter|2\#parameters}, passed {2}
create.file.family=Create File
rename.file.reference.family=Rename File Reference
rename.file.reference.text=Rename File Reference to {0}
create.directory.text=Create Directory {0}
create.file.text=Create File {0}
create.tagfile.text=Create Tag File {0}
rename.file.fix=Rename File
rename.element.family=Rename Element
rename.public.class.text=Rename class ''{0}'' to ''{1}''
rename.named.element.text=Rename ''{0}'' to ''{1}''
dialog.edit.template.checkbox.html.text=HTML Text
dialog.edit.template.checkbox.xsl.text=XSL Text
