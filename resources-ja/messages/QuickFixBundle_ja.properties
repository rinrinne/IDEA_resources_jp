add.import=インポートの追加
class.to.import.chooser.title=インポートするクラス
access.static.via.class.reference.family=クラス参照により静的にアクセスする
access.static.via.class.reference.text=クラス ''{2}'' 参照により静的 ''{1}.{0}' にアクセスする
add.default.constructor.family=デフォルト コンストラクタの追加
add.default.constructor.text={0} へのパブリックな引数がないコンストラクタの追加
add.catch.clause.family=キャッチ句への例外の追加
add.catch.clause.text=キャッチ句の追加
add.exception.to.throws.inherited.method.warning.text=メソッド ''{0}'' は継承されています。\n\
  メソッド階層全体でメソッド シグネチャに例外を追加しますか ?
method.is.inherited.warning.title=Method Is Inherited
add.exception.to.throws.text=メソッド シグネチャに例外を追加
add.exception.to.throws.family=メソッド シグネチャに例外を追加
add.method.body.text=メソッドのボディの追加
add.method.family=メソッドの追加
add.method.text=クラス ''{1}'' へのメソッド ''{0}'' の追加
add.new.array.family=見つからない新規の式を追加する
add.new.array.text=''new {0}[]'' を追加する
add.return.statement.text=return 文の追加
add.return.statement.family=return 文の追加
add.runtime.exception.to.throws.text=メソッド シグネチャにランタイム例外を追加
add.runtime.exception.to.throws.family=メソッド シグネチャにランタイム例外を追加
add.typecast.family=TypeCast の追加
add.typecast.text=''{0}'' にキャストする
add.doctag.to.custom.tags=カスタム タグに {0} を追加する
fix.javadoc.family=Javadoc の修復
adjust.package.family=パッケージ名の調整
adjust.package.text=パッケージ名を ''{0}'' に設定する
bring.variable.to.scope.family=変数をスコープに入れる
bring.variable.to.scope.text=''{0}'' をスコープに入れる

cast.parameter.text={0, choice, 1\#1st|2\#2nd|3\#3rd|4\#{0,number}th} パラメータを ''{1}'' にキャストする
cast.single.parameter.text=パラメータを ''{0}'' にキャストする

add.type.arguments.text=Add explicit type arguments to {0, choice, 1\#1st|2\#2nd|3\#3rd|4\#{0,number}th} argument
add.type.arguments.single.argument.text=Add explicit type arguments

change.class.signature.text=Change signature of ''{0}'' to match ''{1}''
change.class.signature.family=Change class signature

uidesigner.change.bound.field.type=結合フィールドの型を変更する
cannot.change.field.exception=フィールド ''{0}'' の型を変更できません。\n理由 \: {1}

# {0} - original keyword (extends or implements), {1} - proposed keyword (implements or extends), {2} - class name
exchange.extends.implements.keyword=''{0} {2}'' を ''{1} {2}'' に変更する
uidesigner.change.gui.component.type=GUI コンポーネントの型を変更する
change.method.signature.from.usage.family=使用箇所からメソッド シグネチャを変更する

# {0} - original method signature including name, {1} - method name, {2} - proposed new parameters list
change.method.signature.from.usage.text=''{0}'' のシグネチャを ''{1}({2})'' に変更する
add.parameter.from.usage.text=Add ''{0}'' as {1, choice, 1\#1st|2\#2nd|3\#3rd|4\#{1,number}th} parameter to method ''{2}''
remove.parameter.from.usage.text=Remove {0, choice, 1\#1st|2\#2nd|3\#3rd|4\#{0,number}th} parameter from method ''{1}''
change.parameter.from.usage.text=Change {0, choice, 1\#1st|2\#2nd|3\#3rd|4\#{0,number}th} parameter of method ''{1}'' from ''{2}'' to ''{3}''
searching.for.usages.progress.title=使用箇所を検索しています...
create.class.from.new.family=新規からのクラスの作成
create.class.from.new.text=クラス ''{0}'' の作成
create.class.from.usage.family=使用箇所からのクラスの作成
create.class.from.usage.text=Create {0} ''{1}''
create.inner.class.from.usage.text=Create Inner {0} ''{1}''
create.constant.from.usage.family=使用箇所からの定数の作成
create.constant.from.usage.text=定数フィールド {0} の作成
create.enum.constant.from.usage.text=Create Enum Constant ''{0}''
create.constructor.from.new.family=新規からのコンストラクタの作成
create.constructor.from.new.text=コンストラクタの作成
create.constructor.from.super.call.family=super() 呼び出しからのコンストラクタの作成
create.constructor.from.this.call.family=this() 呼び出しからのコンストラクタの作成
create.constructor.text=''{0}'' でのコンストラクタの作成
create.constructor.matching.super=スーパーと一致するコンストラクタを作成する
super.class.constructors.chooser.title=スーパー クラス コンストラクタの選択
create.field.from.usage.family=使用箇所からのフィールドの作成
create.field.from.usage.text=フィールド ''{0}'' の作成
target.class.chooser.title=ターゲット クラスの選択
create.class.title=クラスの作成
create.enum=enum
create.interface=interface
create.class=class
new.method.body.template.error.text="新規メソッド ボディ" テンプレートを修正してください
new.method.body.template.error.title=ファイル テンプレート エラー
cannot.create.java.file.error.text={1} で {0}.java を作成できません \: {2}
cannot.create.java.file.error.title=ファイル作成失敗
cannot.create.java.package.error.text=Cannot create {0} in {1}\: {2}
cannot.create.java.package.error.title=Package Creation Failed
create.accessor.for.unused.field.family=未使用フィールドのアクセッサの作成
create.getter.for.field=''{0}'' の getter を作成する
create.setter.for.field=''{0}'' の setter を作成する
create.getter.and.setter.for.field=''{0}'' の getter と setter を作成する
create.local.from.usage.family=使用箇所からのローカルの作成
create.local.from.usage.text=ローカル変数 ''{0}'' の作成
create.local.from.instanceof.usage.family=instanceof の使用箇所からローカル変数を作成
create.local.from.instanceof.usage.text=''({0}){1}'' 宣言を挿入する
create.method.from.usage.family=使用箇所からのメソッドの作成
create.method.from.usage.text=メソッド ''{0}'' の作成
create.abstract.method.from.usage.text=Create Abstract Method ''{0}''
create.parameter.from.usage.family=使用箇所からのパラメータの作成
create.parameter.from.usage.text=パラメータ ''{0}'' の作成
create.property.from.usage.family=使用箇所からのプロパティの作成
create.getter=Getter の作成
create.setter=Setter の作成
defer.final.assignment.with.temp.family=temp を使用して最終代入を延期する
defer.final.assignment.with.temp.text=temp 変数を使用して ''{0}'' への代入を延期する
delete.catch.family=キャッチの削除
delete.catch.text=''{0}'' のキャッチを削除する
delete.body.family=ボディの削除
delete.body.text=ボディの削除
enable.optimize.imports.on.the.fly=[設定] - [エディタ] - [オンザフライでインポートを最適化する] を有効にする
generalize.catch.family=キャッチの一般化
generalize.catch.text=''{0}'' のキャッチを ''{1}'' に一般化する
generify.family=ファイルの一般化
generify.text=''{0}'' を一般化する
implement.methods.fix=メソッドの実装
import.class.fix=クラスのインポート
insert.new.fix=新規の挿入
insert.super.constructor.call.family=ベース制御呼び出し
insert.super.constructor.call.text='super();' の挿入
make.class.an.interface.family=クラスをインターフェイスにする
make.class.an.interface.text=''{0}'' をインターフェイスにする
make.interface.an.class.text=Make ''{0}'' a class
make.vararg.parameter.last.family=vararg パラメータを最後にする
make.vararg.parameter.last.text=''{0}'' をリストの最後に移動する
fix.parameter.type.family=パラメータの型の修復
fix.parameter.type.text=''{0}'' が型 ''{1}'' のパラメータをここで使用するようにする
fix.return.type.family=戻り型の修復
fix.return.type.text=''{0}'' が ''{1}'' を返すようにする
fix.throws.list.family=スロー リストの修復
fix.throws.list.add.exception=''{1}'' スロー リストに ''{0}'' を追加する
fix.throws.list.remove.exception=''{1}'' スロー リストから ''{0}'' を削除する
fix.modifiers.family=修飾子の修復

anonymous.class.presentation={0} から派生した匿名クラス
# {0} owner class name
class.initializer.presentation={0} クラス初期化子
add.modifier.fix=''{0}'' を {1} にする
remove.modifier.fix=''{0}'' を {1} でないようにする

change.inheritors.visibility.warning.text=継承の可視性をベース メソッドの可視性に変更しますか ?
change.inheritors.visibility.warning.title=継承の変更
move.class.in.extend.list.family=拡張リストのクラスの移動
move.bound.class.to.front.fix.text=境界 ''{0}'' を型パラメータ ''{1}'' の境界リストの先頭に移動する
move.catch.up.family=キャッチを上に移動
move.catch.up.text=''{0}'' のキャッチを ''{1}'' の前に移動する
move.class.to.separate.file.family=セパレータ ファイルへのクラスの移動
move.class.to.separate.file.text=クラス ''{0}'' を ''{0}.java'' に移動する
move.class.to.package.family=パッケージへのクラスの移動
move.class.to.package.text=パッケージ ''{0}'' に移動する

# change if (!a == b) ...  =>  if (!(a == b)) ...
negation.broader.scope.family=より広いコープの否定
negation.broader.scope.text=''\!({0})'' に変更する

optimize.imports.fix=インポートの最適化
remove.qualifier.fix=限定子の削除
remove.redundant.else.fix=冗長な 'else' の削除
remove.unused.parameter.family=未使用パラメータの削除
remove.unused.parameter.text=パラメータ ''{0}'' の削除
remove.unused.variable.family=未使用変数の削除
remove.unused.variable=変数 ''{0}'' の削除
remove.unused.field=フィールド ''{0}'' の削除
rename.wrong.reference.family=不正な参照名の変更
rename.wrong.reference.text=参照名の変更
reuse.variable.declaration.family=変数宣言の再使用
reuse.variable.declaration.text=以前の変数 ''{0}'' 宣言の再使用
safe.delete.family=セーフ デリート
safe.delete.text=''{0}'' のセーフ デリート
setup.jdk.location.family=JDK の場所の設定
setup.jdk.location.text=JDK の設定
side.effects.warning.dialog.title=見つかった副作用
simplify.boolean.expression.family=Boolean 式を簡略化する
simplify.boolean.expression.text=''{0}'' を {1} に簡略化する
fix.super.method.return.type.family=スーパー メソッドの戻り型の修復
fix.super.method.return.type.text=''{0}'' が ''{1}'' を返すようにする
surround.with.try.catch.fix=try/catch で囲む
make.final.family=Final にする
make.final.text=''{0}'' を final にする
make.final.copy.to.temp=''{0}'' を temp final 変数にコピーする
make.final.transform.to.one.element.array=''{0}'' を final の 1 つの要素配列に変形する
fix.variable.type.family=変数の型の修復
fix.variable.type.text=''{0}'' の型を ''{1}'' に変更する

# Sample: Boolean b = "true"; -> Boolean b = Boolean.valueOf("true");
wrap.expression.using.static.accessor.family=式の折り返し
wrap.expression.using.static.accessor.text=''{1}'' を使用して ''{0}'' を折り返す

# {0} - qualified class name suggested to be imported.
side.effect.action.remove=削除(&R)
side.effect.action.transform=変形(&T)
side.effect.action.cancel=キャンセル(&C)
side.effect.message1=<html><body>\
  変数 ''{0}'' に代入された式で可能性のある副作用が見つかりました。<br>\
  次のことができます \:<ul><li>含まれているすべての式と共に変数の使用箇所を<b>削除</b>する。</li>\
  </body></html>
# {0} - variable name, {1} - variable type, {2} - expression with side effect, {3} - same expression transformed to hold the effect
side.effect.message2=<html><body>\
  変数 ''{0}'' に代入された式で可能性のある副作用が見つかりました。<br>\
  次のことができます \:<ul><li>含まれているすべての式と共に変数の使用箇所を<b>削除</b>する。または、</li>\
  <li>文の変数に代入されている式を<b>変形</b>する。<br>\
  すなわち、<br>\
  <table border\=1><tr><td><code>{1} {0} \= {2}</code></td></tr></table><br>\
  が<br><table border\=1><tr><td><code>{3}</code> になります。</td></tr></table></li>\
  </body></html>

change.parameter.class.family=パラメータ クラスの変更

change.extends.list.family=クラスの拡張
add.class.to.extends.list=''{0}'' が ''{1}'' を拡張するようにする
remove.class.from.extends.list=''{0}'' が ''{1}'' を拡張しないようにする
add.interface.to.implements.list=''{0}'' が ''{1}'' を実装するようにする
remove.interface.from.implements.list=''{0}'' が ''{1}'' を実装しないようにする
convert.method.to.constructor=メソッドをコンストラクタにする

create.class.text=Create Class {0}
create.interface.text=Create Interface {0}
create.package.text=Create Package {0}
create.field.text=Create Field {0}
create.property.text=Create Property {0}
add.constructor.parameter.name=Add constructor parameter
remove.suppression.action.name=Remove ''{0}'' suppression
remove.suppression.action.family=Remove suppression
remove.qualifier.action.text=Remove Qualifier
fix.argument.family=Fix Arguments
change.new.operator.type.text=Change ''{0}'' to ''new {1}{2}''
change.new.operator.type.family=Change new operator type

fix.unused.symbol.injection.family=Add to Dependency Injection Annotations
fix.unused.symbol.injection.text=Suppress for {0} annotated by ''{1}''
fix.add.special.annotation.family=Add to Special Annotations
fix.add.special.annotation.text=Add ''{0}'' to special annotations list

orderEntry.fix.add.dependency.on.module=Add dependency on module ''{0}''
orderEntry.fix.family.add.module.dependency=Add module dependency
orderEntry.fix.add.library.to.classpath=Add library ''{0}'' to classpath
orderEntry.fix.family.add.library.to.classpath=Add library to classpath
orderEntry.fix.circular.dependency.warning=Adding dependency on module ''{0}'' will introduce circular dependency between modules ''{1}'' and ''{2}''.\nAdd dependency anyway?
orderEntry.fix.title.circular.dependency.warning=Circular Dependency Warning
orderEntry.fix.add.junit.jar.to.classpath=Add 'junit.jar' to classpath
orderEntry.fix.add.annotations.jar.to.classpath=Add 'annotations.jar' to classpath
static.import.method.text=Static Import Method
static.import.method.choose.method.to.import=Choose Method to Import

add.library.title.dialog=Add Library to Project
add.library.title.locate.library=Locate library
add.library.description.locate.library=Locate library file which will be added as module library
add.library.title.choose.folder=Choose directory
add.library.description.choose.folder=Choose directory where the library will be copied
add.library.title.error=Error
add.library.error.not.found=Library file ''{0}'' does not exist
add.library.error.cannot.copy=Cannot copy ''{0}'' to ''{1}''\n({2})
add.library.annotations.description=You are using annotation classes from org.jetbrains.annotations package.\n\
Please add ''annotations.jar'' library to your project.
add.library.file=Library &file\:
add.library.add.this=&Add this file
add.library.copy.to=&Copy to
permute.arguments=Permute arguments
fix.single.character.string.to.char.literal.text=Change {0} to {1} (to {2} literal)
fix.single.character.string.to.char.literal.family=Fix literal type

create.readable.writable.property.with.field=Create getter, setter and field for ''{0}''
create.readable.property=Create getter for ''{0}''
create.writable.property=Create setter for ''{0}''
create.readable.property.with.field=Create getter and field for ''{0}''
create.writable.property.with.field=Create setter and field for ''{0}''

change.to.append.family=Fix StringBuilder append
change.to.append.text=Change to ''{0}''

convert.to.string.family=Fix Character Literal
convert.to.string.text=Convert to String Literal

initialize.final.field.in.constructor.name=Initialize in constructor
initialize.final.field.in.constructor.choose.dialog.title=Choose constructors to add initialization to

remove.redundant.arguments.text=Remove redundant arguments to call ''{0}''
remove.redundant.arguments.family=Remove redundant arguments

replace.with.list.access.text=Replace with list access

add.qualifier=Add qualifier
add.qualifier.original.class.chooser.title=Original class
