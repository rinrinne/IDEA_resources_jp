# {0} = Inspection|Dependency Analysis|Duplication Analysis
specify.analysis.scope={0} スコープの指定
analysis.scope.title={0} スコープ
scope.option.whole.project=プロジェクト全体(&W)
scope.option.module=モジュール ''{0}''
scope.option.module.with.mnemonic=モジュール ''{0}''(&M)
scope.option.custom=カスタム スコープ(&S)
scope.option.include.test.sources=テスト ソースを含める(&T)
scope.project=プロジェクト ''{0}''
scope.file=ファイル ''{0}''(&F)
scope.directory=ディレクトリ ''{0}''
scope.package=パッケージ {0}

# {0} module list comma separated, {1} - module count
scope.module.list={1, choice, 1\#Module|2\#Modules} {0}

#actions
action.rerun.dependency=依存関係分析に戻る
action.group.by.scope.type=スコープ タイプ別にグループ化
action.group.by.scope.type.description=スコープ タイプ別にグループ化 (製品、テスト、ライブラリ)
action.show.files=ファイルの表示
action.show.files.description=ファイルの表示/非表示
action.close.dependency.description=依存関係ビューアを閉じる
action.close.modules.dependencies.description=モジュール依存関係ビューアを閉じる
action.module.dependencies.direction=依存関係の参照方向
action.analyzing.cyclic.dependencies.in.scope={0} の循環依存
action.analyze.verb=分析する
action.analysis.noun=分析
action.cyclic.dependency.title=循環依存分析
action.flatten.packages=パッケージのフラット表示
action.show.modules=モジュールの表示
action.show.modules.description=モジュールの表示/非表示
action.show.illegals.only=不正のみ表示
action.show.illegals.only.description=不正な依存関係を持つファイルのみ表示
action.edit.rules=ルールの編集
action.edit.rules.description=依存関係ルールの編集
action.select.in.left.tree=左側のツリーから選択
action.select.in.left.tree.description=左側のツリーから選択 (依存関係を参照)
action.forward.dependency.analysis=依存関係分析
action.backward.dependency.analysis=逆方向の依存関係分析


cyclic.dependencies.scope.dialog.title={0} スコープの指定
cyclic.dependencies.scope.dialog.project.button=プロジェクト全体を {0}(&P)
cyclic.dependencies.scope.dialog.module.button=モジュール ''{1}'' を {0}(&M)
cyclic.dependencies.tree.cycle.node.text=循環
cyclic.dependencies.usage.view.root.node.text=パッケージ ''{1}'' でのパッケージ ''{0}'' の使用
cyclic.dependencies.usage.view.initial.text=左側のツリーから分析するパッケージを選択してください
cyclic.dependencies.progress.text=依存関係グラフをビルドしています

module.dependencies.cycle.node.text=循環 {0}
module.dependencies.scope.dialog.module.button=モジュール ''{0}'' の検査(&M)
module.dependencies.scope.dialog.project.button=プロジェクト全体の検査(&P)
module.dependencies.scope.dialog.title=分析スコープの指定
module.dependencies.toolwindow.title={0} のモジュール依存関係

backward.dependencies.usage.view.root.node.text=右側ツリーのスコープ選択における左側ツリーのスコープ選択の使用
backward.dependencies.usage.view.initial.text=右側ツリーで検索する場所、左側ツリーで検索する内容を選択してください。

forward.dependencies.usage.view.root.node.text=左側ツリーのスコープ選択における右側ツリーのスコープ選択の使用
forward.dependencies.usage.view.initial.text=左側ツリーで検索する場所、右側ツリーで検索する内容を選択してください。

package.dependencies.progress.title=依存関係を分析しています
package.dependencies.progress.text=パッケージ依存関係を分析しています
backward.dependencies.progress.text=逆方向に依存関係を分析しています

find.dependencies.progress.text=使用箇所を検索しています \:{0}
usage.view.canceled=キャンセルしました
package.dependencies.toolwindow.title={0} の依存関係
package.dependencies.on.toolwindow.title=Dependencies of {0} on {1}
no.dependencies.found.message=No dependencies of {0} on {1} found.
backward.dependencies.toolwindow.title={0} の逆方向の依存関係
package.dependencies.build.progress.text=パッケージを検索しています
package.dependencies.build.process.title=パッケージを検索していす

#dependencies tree nodes text
package.dependencies.library.node.text=ライブラリ クラス
package.dependencies.test.node.text=テスト クラス
package.dependencies.production.node.text=製品クラス
unknown.node.text=<不明>
package.dependencies.node.items.count={0, choice, 1\#1 entry|2\#{0, number} entries}
dependencies.tree.node.default.package.abbreviation=<デフォルト パッケージ>

#scope selector
dependencies.libraries.node.text=ライブラリ
error.packageset.common.expectations=(test|lib|src)[modulename] expected before \:
error.packageset.token.expectations=予期しない ''{0}''
error.packageset.pattern.expectations=パッケージ パターンが必要
error.packageset.rparen.expected=')' expected
error.packageset.position.parsing.error=位置 {1} の {0}

#dependencies configurations
status.bar.no.rule.violation.message=ルール違反はありません
status.bar.rule.violation.message=The following rule{0, choice, 1\# is|2\#s are} violated\: {1}
dependency.configurable.display.name=依存関係の検証
dependency.configurable.deny.table.column1=使用を許可しない
dependency.configurable.deny.table.column2=in
dependency.configurable.allow.table.column1=使用を許可する
dependency.configurable.allow.table.column2=only in

scope.display.name.deny.scope=スコープ ''{1}'' でのみスコープ ''{0}'' の使用を許可しない
scope.display.name.allow.scope=スコープ ''{1}'' でのスコープ ''{0}'' の使用を許可する
scope.option.uncommited.files=&Uncommitted files
scope.option.uncommited.files.all.changelists.choice=All
scanning.scope.progress.title=Scanning scope ...
analyzing.project=Analyzing Project
checking.class.files=Checking Class Files
recompile.confirmation.message=Project class files are out of date. \nDo you want to compile a project before continuing DSM analysis?\nThe refusal to do it might result in incomplete or incorrect data.
project.is.out.of.date=Project Is Out Of Date
skip.import.statements.checkbox.title=Skip import statements
mark.dependency.illegal.text=Mark Illegal
scope.selected.files=Selected files
update.module.tree.progress.title=Update modules tree
update.module.tree.progress.text=Process module ''{0}'' cycles
scope.virtual.files=selection
